default_megacomplex: decay
dataset_groups:
  default:
    residual_function: variable_projection
    link_clp: True
    # residual_function: non_negative_least_squares

# type: kinetic-spectrum
dataset:
  tas_rcg_dcm:
    megacomplex: [artifact_rcg_dcm, complex_rcg_dcm]
    # megacomplex_scale: [scalem.1]
    initial_concentration: input_rcg
    irf: irf_rcg
    scale: scale.rcg_dcm
  tas_gcrcg_dcm:
    megacomplex: [artifact_gcrcg_dcm, complex_gcrcg_dcm]
    # megacomplex_scale: [scalem.2]
    initial_concentration: input_gcrcg
    irf: irf_gcrcg
    scale: scale.gcrcg_dcm
  tas_rcgcr_dcm:
    megacomplex: [artifact_rcgcr_dcm, complex_rcgcr_dcm]
    # megacomplex_scale: [scalem.7]
    initial_concentration: input_rcgcr
    irf: irf_rcgcr
    scale: scale.rcgcr_dcm
  guide_rcg_r1:
    megacomplex: [complex_guide_rcg_r1]
    scale: scale.guide_rcg_r1
  guide_rcg_r2:
    megacomplex: [complex_guide_rcg_r2]
    scale: scale.guide_rcg_r2
  guide_rcg_r3:
    megacomplex: [complex_guide_rcg_r3]
    scale: scale.guide_rcg_r3
  guide_rcg_r4:
    megacomplex: [complex_guide_rcg_r4]
    scale: scale.guide_rcg_r4
  guide_rcg_g:
    megacomplex: [complex_guide_rcg_g]
    scale: scale.guide_rcg_g
  guide_gcrcg_r1:
    megacomplex: [complex_guide_gcrcg_r1]
    scale: scale.guide_gcrcg_r1
  guide_gcrcg_r2:
    megacomplex: [complex_guide_gcrcg_r2]
    scale: scale.guide_gcrcg_r2
  guide_gcrcg_r3:
    megacomplex: [complex_guide_gcrcg_r3]
    scale: scale.guide_gcrcg_r3
  guide_gcrcg_r4:
    megacomplex: [complex_guide_gcrcg_r4]
    scale: scale.guide_gcrcg_r4
  guide_gcrcg_g:
    megacomplex: [complex_guide_gcrcg_g]
    scale: scale.guide_gcrcg_g
  guide_rcgcr_r1:
    megacomplex: [complex_guide_rcgcr_r1]
    scale: scale.guide_rcgcr_r1
  guide_rcgcr_r2:
    megacomplex: [complex_guide_rcgcr_r2]
    scale: scale.guide_rcgcr_r2
  guide_rcgcr_r3:
    megacomplex: [complex_guide_rcgcr_r3]
    scale: scale.guide_rcgcr_r3
  guide_rcgcr_r4:
    megacomplex: [complex_guide_rcgcr_r4]
    scale: scale.guide_rcgcr_r4
  guide_rcgcr_g:
    megacomplex: [complex_guide_rcgcr_g]
    scale: scale.guide_rcgcr_g

megacomplex:
  complex_rcg_dcm:
    k_matrix: [km_rcg_common, kmrcg, kmg]
  artifact_rcg_dcm:
    type: coherent-artifact
    order: 3
  complex_gcrcg_dcm:
    k_matrix: [km_gcrcg_common, km_gcrcg_rcg, km_gcrcg_g]
  artifact_gcrcg_dcm:
    type: coherent-artifact
    order: 3
  complex_rcgcr_dcm:
    k_matrix: [km_rcgcr_common, km_rcgcr_rcg, km_rcgcr_g]
  artifact_rcgcr_dcm:
    type: coherent-artifact
    order: 3
  complex_guide_rcg_r1:
    dimension: time
    target: rcg_r1
    type: clp-guide
  complex_guide_rcg_r2:
    dimension: time
    target: rcg_r2
    type: clp-guide
  complex_guide_rcg_r3:
    dimension: time
    target: rcg_r3
    type: clp-guide
  complex_guide_rcg_r4:
    dimension: time
    target: rcg_r4
    type: clp-guide
  complex_guide_rcg_g:
    dimension: time
    target: rcg_g
    type: clp-guide
  complex_guide_gcrcg_r1:
    dimension: time
    target: gcrcg_r1
    type: clp-guide
  complex_guide_gcrcg_r2:
    dimension: time
    target: gcrcg_r2
    type: clp-guide
  complex_guide_gcrcg_r3:
    dimension: time
    target: gcrcg_r3
    type: clp-guide
  complex_guide_gcrcg_r4:
    dimension: time
    target: gcrcg_r4
    type: clp-guide
  complex_guide_gcrcg_g:
    dimension: time
    target: gcrcg_g
    type: clp-guide
  complex_guide_rcgcr_r1:
    dimension: time
    target: rcgcr_r1
    type: clp-guide
  complex_guide_rcgcr_r2:
    dimension: time
    target: rcgcr_r2
    type: clp-guide
  complex_guide_rcgcr_r3:
    dimension: time
    target: rcgcr_r3
    type: clp-guide
  complex_guide_rcgcr_r4:
    dimension: time
    target: rcgcr_r4
    type: clp-guide
  complex_guide_rcgcr_g:
    dimension: time
    target: rcgcr_g
    type: clp-guide

# how can i now express that the first 20 lines
# are common for complexes 1-5, and the next 11 lines
# are common for complexes 1-4? how can i specify in chunks?
# note that earlier definition will override later definition
k_matrix:
  km_rcg_common:
    matrix:
      (rcg_r2, rcg_r1): rates.k21
      (rcg_r3, rcg_r2): rates.k32
      (rcg_r4, rcg_r3): rates.k43
      (rcg_r4, rcg_r4): rates.k44
  kmg:
    matrix:
      (rcg_g, rcg_g): rates.k55
  kmrcg:
    matrix:
      (rcg_g, rcg_r1): rates.k51
      (rcg_g, rcg_r2): rates.k52
      (rcg_g, rcg_r3): rates.k53
      (rcg_g, rcg_r4): rates.k54
      (rcg_s6, rcg_r1): rates.k61
      (rcg_s6, rcg_r2): rates.k62
      (rcg_s6, rcg_s6): rates.k66
  km_rcgcr_common:
    matrix:
      (rcgcr_r2, rcgcr_r1): rates.k21
      (rcgcr_r3, rcgcr_r2): rates.k32
      (rcgcr_r4, rcgcr_r3): rates.k43
      (rcgcr_r4, rcgcr_r4): rates.k44
  km_rcgcr_g:
    matrix:
      (rcgcr_g, rcgcr_g): ratesrcgcr.k55
  km_rcgcr_rcg:
    matrix:
      (rcgcr_g, rcgcr_r1): rates.k51
      (rcgcr_g, rcgcr_r2): rates.k52
      (rcgcr_g, rcgcr_r3): rates.k53
      (rcgcr_g, rcgcr_r4): rates.k54
      (rcgcr_s6, rcgcr_r1): rates.k61
      (rcgcr_s6, rcgcr_r2): rates.k62
      (rcgcr_s6, rcgcr_s6): rates.k66
  km_gcrcg_common:
    matrix:
      (gcrcg_r2, gcrcg_r1): rates.k21
      (gcrcg_r3, gcrcg_r2): rates.k32
      (gcrcg_r4, gcrcg_r3): rates.k43
      (gcrcg_r4, gcrcg_r4): rates.k44
  km_gcrcg_g:
    matrix:
      (gcrcg_g, gcrcg_g): ratesgcrcg.k55
  km_gcrcg_rcg:
    matrix:
      (gcrcg_g, gcrcg_r1): ratesgcrcg.k51
      (gcrcg_g, gcrcg_r2): ratesgcrcg.k52
      (gcrcg_g, gcrcg_r3): ratesgcrcg.k53
      (gcrcg_g, gcrcg_r4): ratesgcrcg.k54
      (gcrcg_s6, gcrcg_r1): ratesgcrcg.k61
      (gcrcg_s6, gcrcg_r2): ratesgcrcg.k62
      (gcrcg_s6, gcrcg_s6): rates.k66

initial_concentration:
  input_rcg:
    compartments: [rcg_r1, rcg_r2, rcg_r3, rcg_r4, rcg_g, rcg_s6]
    parameters:
      [inputs1.s1, inputs1.0, inputs1.0, inputs1.0, inputs1.g_rcg, inputs1.0]
  input_gcrcg:
    compartments: [gcrcg_r1, gcrcg_r2, gcrcg_r3, gcrcg_r4, gcrcg_g, gcrcg_s6]
    parameters:
      [inputs1.s1, inputs1.0, inputs1.0, inputs1.0, inputs1.g_gcrcg, inputs1.0]
  input_rcgcr:
    compartments: [rcgcr_r1, rcgcr_r2, rcgcr_r3, rcgcr_r4, rcgcr_g, rcgcr_s6]
    parameters:
      [inputs1.s1, inputs1.0, inputs1.0, inputs1.0, inputs1.g_rcgcr, inputs1.0]
    # exclude_from_normalize: [s7]
# 6 needed ! why is it called compartment here and source with equal_area? does this mean that s2=s1*rel.r1 ?
clp_relations:
  - source: rcg_s6
    target: rcgcr_s6
    parameter: rel.r1
    interval: [[0, 1000]]
  - source: rcg_s6
    target: gcrcg_s6
    parameter: rel.r1
    interval: [[0, 1000]]

# spectral_constraints:
# - type: zero
#   compartment: s1
#   interval:
#     - [700,1000]
# - type: zero
#   compartment: s2
#   interval:
#     - [1, 687]
# - type: zero
#   compartment: s3
#   interval:
#     - [1, 687]
# - type: zero
#   compartment: s4
#   interval:
#     - [1, 687]
# - type: zero
#   compartment: g
#   interval:
#     - [1, 687]
# # - type: zero
# #   compartment: s6
# #   interval:
# #     - [1, 687]
# - type: zero
#   compartment: artifact
#   interval:
#     - [595,1000]

# it is implicitly normalized, i.e. divided by sum of irfscale parameters
irf:
  irf_rcg:
    type: spectral-gaussian
    center: irf.center1
    width: irf.width1
    # scale: [irf.scale1,irf.scale4]
    dispersion_center: irf.common_dispcenter
    center_dispersion_coefficients: [irf.data1_disp1, irf.data1_disp2]
    model_dispersion_with_wavenumber: true
  irf_gcrcg:
    type: spectral-gaussian
    center: irf.center2
    width: irf.width2
    # scale: [irf.scale1,irf.scale4]
    dispersion_center: irf.common_dispcenter
    center_dispersion_coefficients: [irf.data1_disp1, irf.data1_disp2]
    model_dispersion_with_wavenumber: true
  irf_rcgcr:
    type: spectral-gaussian
    center: irf.center7
    width: irf.width7
    # scale: [irf.scale1,irf.scale4]
    dispersion_center: irf.common_dispcenter
    center_dispersion_coefficients: [irf.data1_disp1, irf.data1_disp2]
    model_dispersion_with_wavenumber: true
weights:
  - datasets: [tas_rcg_dcm, tas_gcrcg_dcm, tas_rcgcr_dcm]
    global_interval: [520, 535]
    value: 0.4
  - datasets: [tas_rcg_dcm, tas_gcrcg_dcm, tas_rcgcr_dcm]
    global_interval: [1, 420]
    value: 0.2
  - datasets:
      [
        guide_rcg_r1,
        guide_rcg_r2,
        guide_rcg_r3,
        guide_rcg_r4,
        guide_rcg_g,
        guide_gcrcg_r1,
        guide_gcrcg_r2,
        guide_gcrcg_r3,
        guide_gcrcg_r4,
        guide_gcrcg_g,
        guide_rcgcr_r1,
        guide_rcgcr_r2,
        guide_rcgcr_r3,
        guide_rcgcr_r4,
        guide_rcgcr_g,
      ]
    # global_interval: [1, 999]
    # model_interval: [1, 999]
    value: 0.001
